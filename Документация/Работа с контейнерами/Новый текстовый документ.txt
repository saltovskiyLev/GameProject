Создание карты аналогично созданию клеточной карты(см другую документацию)

-картинки для карты также нужно добавить в библеотеку-

0 Создание контейнера;
0.1) Обращаемся к - map.Libtary.AddContaiener(имя_контейнера, картинка_которая_будет_выводится_при_создании, тип_контейнера)
0.2) Задаём размер контейнеру
0.2.1) Контейнер по умолчанию имеет еоординаты 0,0
0.2.2) Задаём ширину и высоту - map.ContainerSetSize(имя_контейнера, ширина, высота)
0.2.3) Альтернатива задать длинну большей стороны - map.ContainerSetMaxSide(имя_контейнера, Длинна_Большей_Сторона);
0.3) Задаём координаты контейнеру;
0.3.1) Координата контейнера - это координата его центра. 	
0.3.2) map.ContainerSetCoordinate(имя_контейнера, X, Y);
0.4) Меняем угол контейнера - map.ContainerSetAngle(имя_контейнера, угол);


1) Создание функций вызываемых с интервалом(таймер)
1.1) Создание таймера
1.1.1) На уровне класса создаём объект типа - TimerController;
1.1.2) Создаём функцию типа void без параметров которую будет вызывать таймер;
1.1.3) Добавляем вызов этой функции к таймеру - timer.AddAction(имя_функции, интервал);
                                                               |без скобок||милисекунды|

1.1.4) Если необходимо остановить функцию по таймеру, то вызываем timer.RemoveAction(имя_функции);



2) Проверка того что клавиша нажата в тот момент как функция нажата
2.1) Чтобы проверить что клавиша сейчас нажата нужно вызвать функцию - map.Keyboard.IsKeyPressed(Key.название_клавиши);
|Эта функция возвращает true если клавиша нажата|


3) Функция проверки пересечения контейнеров - map.ContainerSetCoordinate(имя_контейнера, r.Next(минимальное_значение, максимальное_значение), r.Next(максимальное_значение, минимальное_значение));



(Аналогично движению и игровому циклу делаются все действия игроков)
(ContainerType.AutosizedSingleImage)
																							